I chose to do this app without the template as I am more familiar with volley than I am to retrofit, but not only that I also believe that volley is a much more powerful efficient.
I had a hard time with this project but not because of the complexity but for the lack of documentation on the weather API. One clear example is that on your mock up clearly show the state and city when you introduce the ZIP code, nevertheless there was no way to achieve that (as far as I could try or find on the documentation), there was a way to implement autocomplete based on the city name for US based cities but it was out of scope. Also, while I am confident that the code works, I am not sure the images of all kind of weather will appear because as with the ZIP code there is no information about the responses they return so I had to improvise accordantly and try to predict the responses from server for special occasions (snowy being one of them), also the images where not enough for all the possible weather conditions so I also repeated some images on different kind of weather. It’s the same case for actual weather so I just take the most approximate time as current weather.
As for code documentation. I chose volley for the simplicity but also because the android documentation recommends it as well as the library by choice. I use a custom Action Bar and tool bar and collapsing tool bar to create a shrinking effect when scrolling down to see the rest of the card views content. I created only two card views as in the mock up seem that you are only showing up to two days, with more time and some more clarity on the requirements I might have used instead a recycler view with the card views. Inside the card views I use a gridview to auto-populate each grid with whatever amount of weather predictions because we will never now the amount we will get (granted it will never be more than 24 but could be any number under that). For ease of use and handling I use data binding to identified all the view within my main view. For the settings, I use a design text input layout to have a edit text with a animated hint and a spinner to display the options for the units.
For the gridview I have the adapter with all the fields necessary to show he 3 data points asked. Time, condition and temperature (civil, condition and English/metric in that order). I also have expandable height for the gridview to assure it resizes to the right size to show after being populated. For the calls I created the method makeJsonObjReq(); which creates a queue makes the call add the call and gets or not the response (while waiting for the response a progress dialog bar is shown while it completes the request to let now the user that background process is happening), from there I deserialize the object and get and store each object on arrays that will be passed to the adapter. I chose this method instead of passing the whole object to the adapter because if I am already going trough each one of the objects I don’t see the value to do that again inside the adapter this way I save even if a little some performance on the device.
I am making sure that without the zip code parameter there wont go any call out (preventing erroneous calls) and completing the requirement that without zip code the app prompts you to insert one. Also when the app goes to background I decided to not make a call as per request to refresh the data but when it came back so that way you will get the most recent data (I achieved this be putting the makeJsonObjReq method on onResume) when on the settings ( I know it is not a gear but couldn’t find the resource for that on your template) I use instances to pass the information back to the main activity (with more time I would have also saved the zip code choice with sharedpreferences so it could remember the user choice). I use pointers to determine which ones are the coldest and hottest temperatures of the day and use tints on the vectors to make them change color (had to convert 60 Fahrenheit to Celsius to achieve the color change on the action bar when Celsius has been selected). I created a method which will map the condition to the corresponding image. And also created an experience for when the response is not available for whatever reason. to show the whole hourly forecast i decided to use a scroll view as it will keep the same sie on the cards without having big difference between both cards and stiil being able to see all the datapoints
Finally, while my reason to use volley might sound like an excuse for not knowing a technology or not wanting to learn it, that is not the case while I do care and love about learning other technologies I think that a timed evaluation might be the best time to do so.
Please fell free to ask or question any part of the code you might have questions doubts or suggestion I am always open to feedback furthermore it is encouraged.
This assignment was completed by jose de jesus castro sanchez in 8:30 hours
